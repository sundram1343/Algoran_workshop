{
  "version": 3,
  "sources": [
    "C:/Users/sundr/algogrand_workshop/projects/algogrand_workshop/smart_contracts/hello_world/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAKoC;AAAsB;;;;;;;;;;;;;AAAxD;AAFF;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAWE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AALF;;;AAAA;;;AAKE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAKE;;;AAHkC;AAIhC;;AAAA;AACO;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAP;AALgC;AAAA;AAAA;AAAA;AAUhC",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"food\" 0x151f7c75"
    },
    "17": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "19": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "22": {
      "op": "bytec_0 // \"food\"",
      "defined_out": [
        "\"food\""
      ],
      "stack_out": [
        "\"food\""
      ]
    },
    "23": {
      "op": "pushbytes \"Not set yet\"",
      "defined_out": [
        "\"Not set yet\"",
        "\"food\""
      ],
      "stack_out": [
        "\"food\"",
        "\"Not set yet\""
      ]
    },
    "36": {
      "op": "app_global_put",
      "stack_out": []
    },
    "37": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "39": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "42": {
      "op": "pushbytess 0x1e9ea9db 0xf716ebb2 // method \"setFavoriteFood(string)string\", method \"getFavoriteFood()string\"",
      "defined_out": [
        "Method(getFavoriteFood()string)",
        "Method(setFavoriteFood(string)string)"
      ],
      "stack_out": [
        "Method(setFavoriteFood(string)string)",
        "Method(getFavoriteFood()string)"
      ]
    },
    "54": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(getFavoriteFood()string)",
        "Method(setFavoriteFood(string)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(setFavoriteFood(string)string)",
        "Method(getFavoriteFood()string)",
        "tmp%2#0"
      ]
    },
    "57": {
      "op": "match main_setFavoriteFood_route@5 main_getFavoriteFood_route@6",
      "stack_out": []
    },
    "63": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "64": {
      "op": "return",
      "stack_out": []
    },
    "65": {
      "block": "main_getFavoriteFood_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "67": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "68": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "69": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "71": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "72": {
      "callsub": "smart_contracts/hello_world/contract.algo.ts::FavoriteFood.getFavoriteFood",
      "op": "callsub getFavoriteFood",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "75": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "76": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%1#0"
      ]
    },
    "77": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%1#0"
      ]
    },
    "78": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%1#0"
      ]
    },
    "81": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ]
    },
    "82": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "83": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "84": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "85": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "86": {
      "op": "log",
      "stack_out": []
    },
    "87": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "88": {
      "op": "return",
      "stack_out": []
    },
    "89": {
      "block": "main_setFavoriteFood_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "91": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "92": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "93": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "95": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "96": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "99": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "102": {
      "callsub": "smart_contracts/hello_world/contract.algo.ts::FavoriteFood.setFavoriteFood",
      "op": "callsub setFavoriteFood",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "105": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "106": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "107": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "108": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "111": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "112": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "113": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "114": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "115": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "116": {
      "op": "log",
      "stack_out": []
    },
    "117": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "118": {
      "op": "return",
      "stack_out": []
    },
    "119": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "121": {
      "op": "bnz main_after_if_else@13",
      "stack_out": []
    },
    "124": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "126": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "127": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "128": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "129": {
      "op": "return",
      "stack_out": []
    },
    "130": {
      "subroutine": "smart_contracts/hello_world/contract.algo.ts::FavoriteFood.setFavoriteFood",
      "params": {
        "foodName#0": "bytes"
      },
      "block": "setFavoriteFood",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "133": {
      "op": "bytec_0 // \"food\"",
      "defined_out": [
        "\"food\""
      ],
      "stack_out": [
        "\"food\""
      ]
    },
    "134": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"food\"",
        "foodName#0 (copy)"
      ],
      "stack_out": [
        "\"food\"",
        "foodName#0 (copy)"
      ]
    },
    "136": {
      "op": "app_global_put",
      "stack_out": []
    },
    "137": {
      "op": "pushbytes \"Favorite food set to: \"",
      "defined_out": [
        "\"Favorite food set to: \""
      ],
      "stack_out": [
        "\"Favorite food set to: \""
      ]
    },
    "161": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"Favorite food set to: \"",
        "foodName#0 (copy)"
      ]
    },
    "163": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "164": {
      "retsub": true,
      "op": "retsub"
    },
    "165": {
      "subroutine": "smart_contracts/hello_world/contract.algo.ts::FavoriteFood.getFavoriteFood",
      "params": {},
      "block": "getFavoriteFood",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "166": {
      "op": "bytec_0 // \"food\"",
      "defined_out": [
        "\"food\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"food\""
      ]
    },
    "167": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "168": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "169": {
      "retsub": true,
      "op": "retsub"
    }
  }
}